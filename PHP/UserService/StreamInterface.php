<?php 
declare(strict_types=1);
# Generated by the Minichan compiler. DO NOT EDIT!
# source: proto/userauth.proto

namespace PHP\UserService;


interface StreamInterface extends \Minichan\Grpc\ServiceInterface
{
    public const NAME = "/PHP.UserService.Stream";

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchRegistered(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchLogin(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchDelete(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchUpdates(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchAllUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;
}
