<?php declare(strict_types=1);
# Generated by the Minichan compiler. DO NOT EDIT!
# source: proto/userauth.proto

namespace PHP\UserService;


class StreamClient extends \Minichan\Grpc\BaseStub
{


	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchRegistered(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.Stream/FetchRegistered',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }

	public function getNext(): object {
	    return $this->_getData();
	}



	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchLogin(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.Stream/FetchLogin',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchDelete(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.Stream/FetchDelete',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchUpdates(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.Stream/FetchUpdates',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchUser(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.Stream/FetchUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function FetchAllUser(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.Stream/FetchAllUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }
}
