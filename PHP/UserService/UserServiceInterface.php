<?php 
declare(strict_types=1);
# Generated by the Minichan compiler. DO NOT EDIT!
# source: proto/userauth.proto

namespace PHP\UserService;


interface UserServiceInterface extends \Minichan\Grpc\ServiceInterface
{
    public const NAME = "/PHP.UserService.UserService";

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function RegisterUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function Login(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function UpdateUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function DeleteUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function GetUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;

    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function GetAllUser(\Minichan\Grpc\ContextInterface $ctx, User $request): UserResponse;
}
