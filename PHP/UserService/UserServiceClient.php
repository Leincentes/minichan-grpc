<?php declare(strict_types=1);
# Generated by the Minichan compiler. DO NOT EDIT!
# source: proto/userauth.proto

namespace PHP\UserService;


class UserServiceClient extends \Minichan\Grpc\BaseStub
{


    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function RegisterUser(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.UserService/RegisterUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function Login(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.UserService/Login',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function UpdateUser(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.UserService/UpdateUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function DeleteUser(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.UserService/DeleteUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



    /**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function GetUser(User $request, $metadata = []): UserResponse {
    	return $this->_simpleRequest('/PHP.UserService.UserService/GetUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }



	/**
    * @param User $request
    * @return UserResponse
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function GetAllUser(User $request, $metadata = []): UserResponse {
    	return $this->_serverStreamRequest('/PHP.UserService.UserService/GetAllUser',
        $request,
        ['\PHP\UserService\UserResponse', 'decode'],
        $metadata); 
    }

	public function getNext(): object {
	    return $this->_getData();
	}
}
