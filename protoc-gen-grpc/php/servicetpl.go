// MIT License
//
// Copyright (c) 2022 - present Open Swoole Group
// Copyright (c) 2018 SpiralScout
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package php

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	desc "google.golang.org/protobuf/types/descriptorpb"
	plugin "google.golang.org/protobuf/types/pluginpb"
)

const serviceInterfaceTemplate = `<?php 
declare(strict_types=1);
# Generated by the Minichan compiler. DO NOT EDIT!
# source: {{ .File.Name }}
{{ $ns := .Namespace -}}
{{if $ns.Namespace}}
namespace {{ $ns.Namespace }};
{{end}}

{{- range $n := $ns.Import}}
use {{ $n }};
{{- end}}

interface {{ .Service.Name | interface }} extends \Minichan\Grpc\ServiceInterface
{
    public const NAME = "/{{ .File.Package }}.{{ .Service.Name }}";{{ "\n" }}

{{- range $m := .Service.Method}}
    /**
    * @param \Minichan\Grpc\ContextInterface $ctx
    * @param {{ name $ns $m.InputType }} $request
    * @return {{ name $ns $m.OutputType }}
    *
    * @throws \Minichan\Exception\InvokeException
    */
    public function {{ $m.Name }}(\Minichan\Grpc\ContextInterface $ctx, {{ name $ns $m.InputType }} $request): {{ name $ns $m.OutputType }};
{{end -}}
}
`

// const serviceTemplate = `<?php
// declare(strict_types=1);
// /* Generated by the Grpc compiler. DO NOT EDIT!
//    source: {{ .File.Name }} */
// {{ $ns := .Namespace -}}
// {{if $ns.Namespace}}
// namespace {{ $ns.Namespace }};
// {{end}}

// use Grpc\Grpc;

// {{- range $n := $ns.Import}}
// use {{ $n }};
// {{- end}}

// class {{ .Service.Name | service }} implements {{ .Service.Name | interface }}
// {
// {{- range $m := .Service.Method}}
//    /**
//    * @param \Grpc\Grpc\ContextInterface $ctx
//    * @param {{ name $ns $m.InputType }} $request
//    * @return {{ name $ns $m.OutputType }}
//    *
//    * @throws \Grpc\Grpc\Exception\InvokeException
//    */
//    public function {{ $m.Name }}(\Grpc\Grpc\ContextInterface $ctx, {{ name $ns $m.InputType }} $request): {{ name $ns $m.OutputType }}
//    {
// 		$message = new {{ name $ns $m.OutputType }};
// 		$message = $message->setMessage("Hello, " . $request->getName());

// 		return $message;
//    }
// {{end -}}
// }
// `

func interfacefilename(file *desc.FileDescriptorProto, name *string) string {
	ns := namespace(file.Package, "/")
	if file.Options != nil && file.Options.PhpNamespace != nil {
		ns = strings.ReplaceAll(*file.Options.PhpNamespace, `\`, `/`)
	}

	return fmt.Sprintf("%s/%s.php", ns, identifier(*name, "interface"))
}

// func servicefilename(file *desc.FileDescriptorProto, name *string) string {
// 	ns := namespace(file.Package, "/")
// 	if file.Options != nil && file.Options.PhpNamespace != nil {
// 		ns = strings.ReplaceAll(*file.Options.PhpNamespace, `\`, `/`)
// 	}

// 	return fmt.Sprintf("%s/%s.php", ns, identifier(*name, "service"))
// }

func interfacebody(req *plugin.CodeGeneratorRequest, file *desc.FileDescriptorProto, service *desc.ServiceDescriptorProto) string {
	out := bytes.NewBuffer(nil)

	data := struct {
		Namespace *ns
		File      *desc.FileDescriptorProto
		Service   *desc.ServiceDescriptorProto
	}{
		Namespace: newNamespace(req, file, service),
		File:      file,
		Service:   service,
	}

	tpl := template.Must(template.New("serviceInterfaceTemplate").Funcs(template.FuncMap{
		"interface": func(name *string) string {
			return identifier(*name, "interface")
		},
		"name": func(ns *ns, name *string) string {
			return ns.resolve(name)
		},
	}).Parse(serviceInterfaceTemplate))

	err := tpl.Execute(out, data)
	if err != nil {
		panic(err)
	}

	return out.String()
}

// func servicebody(req *plugin.CodeGeneratorRequest, file *desc.FileDescriptorProto, service *desc.ServiceDescriptorProto) string {
// 	out := bytes.NewBuffer(nil)

// 	data := struct {
// 		Namespace *ns
// 		File      *desc.FileDescriptorProto
// 		Service   *desc.ServiceDescriptorProto
// 	}{
// 		Namespace: newNamespace(req, file, service),
// 		File:      file,
// 		Service:   service,
// 	}

// 	tpl := template.Must(template.New("serviceTemplate").Funcs(template.FuncMap{
// 		"service": func(name *string) string {
// 			return identifier(*name, "service")
// 		},
// 		"interface": func(name *string) string {
// 			return identifier(*name, "interface")
// 		},
// 		"name": func(ns *ns, name *string) string {
// 			return ns.resolve(name)
// 		},
// 	}).Parse(serviceTemplate))

// 	err := tpl.Execute(out, data)
// 	if err != nil {
// 		panic(err)
// 	}

// 	return out.String()
// }
